spring:
  datasource:
    username: postgres
    initialization-mode: always
    url: jdbc:postgresql://localhost:5432/course
    continue-on-error: 'true'
    password: '{cipher}59518e3a25b1426f60e4d8bf270f5602f05640d2b8f10bec8c66e22332ee3fe4'
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none
  liquibase:
    enabled: 'true'
    change-log: classpath:/liquibase/update.xml

eureka:
  instance:
    preferIpAddress: true # registers the IP address of the service rather than the server name
  client:
    registerWithEureka: true # registers the service with Eureka
    fetchRegistry: true # pulls down a local copy of the registry
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

management:
  endpoints:
    web:
      exposure:
        include: '*'
  health:
    circuitbreakers:
      enabled: true

#resilience4j.circuitbreaker:
#  instances:
#    courseService:
#      registerHealthIndicator: true
#      ringBufferSizeInClosedState: 5
#      ringBufferSizeInHalfOpenState: 3
#      waitDurationInOpenState: 30s
#      failureRateThreshold: 3
#      recordExceptions:
#        - org.springframework.web.client.HttpServerErrorException
#        - java.io.IOException
#        - java.util.concurrent.TimeoutException
#        - org.springframework.web.client.ResourceAccessException